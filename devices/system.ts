import { out, outError } from '../out';
import { PAGE_PROGRAM, PEEK2, Stack, Uxn, uxn_eval} from '../uxn'
import { RAM_PAGES } from '../uxnemu'

const errors: string[] = [
	"underflow",
	"overflow",
	"division by zero"
];

function system_print(s: Stack, name: string): void {
  out(`<${name}>`);

  for (let i = 0; i < s.ptr; i++) {
    out(` ${s.dat[i].toString(16).padStart(2, '0')}`);
  }
  if (s.ptr === 0) {
    out(' empty');
  }
  out('\n');
}

function system_cmd(ram: number[], addr: number)
{
	if(ram[addr] == 0x01) {
		let i, length = PEEK2(ram.slice(addr + 1));
		const a_page = PEEK2(ram.slice(addr + 1 + 2));
    const a_addr = PEEK2(ram.slice(addr + 1 + 4));
		const b_page = PEEK2(ram.slice(addr + 1 + 6));
    const b_addr = PEEK2(ram.slice(addr + 1 + 8));
		const src = (a_page % RAM_PAGES) * 0x10000;
    const dst = (b_page % RAM_PAGES) * 0x10000;

		for(i = 0; i < length; i++)
			ram[dst + (b_addr + i)] = ram[src + (a_addr + i)];
	}
}

function system_inspect(u: Uxn)
{
	system_print(u.wst, "wst");
	system_print(u.rst, "rst");
}

// const HelloWorldRom = [128, 104, 128, 24, 23, 128, 101, 128, 24, 23, 128, 108, 128, 24, 23, 128, 108, 128, 24, 23, 128, 111, 128, 24, 23, 128, 10, 128, 24, 23];
const HelloWorldRom = [
  160,1,61,128,32,55,160,240,127,128,8,55,160,240,224,128,10,55,160,240,192,128,12,55,160,1,0,128,34,55,160,0,176,128,36,55,128,34,54,128,1,63,128,0,49,128,36,54,128,1,63,128,2,49,96,1,119,96,0,87,0,160,0,0,161,128,250,51,128,1,63,160,0,31,60,160,0,64,57,38,128,40,55,128,42,55,160,3,35,96,0,252,128,0,48,160,0,112,57,128,40,55,128,2,48,160,0,72,57,128,42,55,160,3,195,128,200,50,160,0,255,60,128,2,31,128,7,28,128,64,31,56,128,44,55,128,143,128,47,23,96,1,33,96,0,1,0,128,0,48,160,0,96,57,128,40,55,128,2,48,160,0,72,57,128,42,55,160,3,67,128,44,55,128,246,128,38,23,128,5,128,47,23,128,0,48,160,0,112,57,128,40,55,128,2,48,160,0,56,57,128,42,55,160,3,67,128,44,55,128,245,128,38,23,128,5,128,47,23,128,0,128,38,23,160,3,51,128,44,55,128,0,128,0,7,128,15,28,128,48,31,128,0,48,160,0,96,57,56,128,40,55,128,0,7,128,240,28,128,1,31,128,2,48,160,0,56,57,56,128,42,55,6,128,47,23,1,6,32,255,207,2,108,24,15,160,3,51,128,44,55,128,42,55,128,40,55,128,1,128,38,23,79,128,47,151,128,2,128,38,23,4,128,16,24,4,151,128,40,182,160,0,8,57,5,55,128,1,128,38,23,4,128,16,24,4,151,4,128,16,24,4,23,108,128,44,55,160,1,38,23,128,40,54,128,61,51,128,34,54,128,3,63,3,128,8,24,128,18,19,128,36,54,128,3,63,3,128,8,24,128,0,6,128,2,31,15,128,0,128,0,6,128,2,31,207,24,128,1,28,128,47,23,1,138,32,255,239,128,42,182,160,0,8,56,5,55,160,0,0,128,40,55,34,66,1,138,32,255,208,34,108,128,1,128,38,23,128,0,48,160,0,48,56,128,40,55,128,2,48,160,0,72,57,128,42,55,128,34,54,96,0,14,160,3,43,128,44,55,128,1,128,47,23,128,36,54,128,0,128,27,19,160,39,16,96,0,51,160,3,232,96,0,45,160,0,100,96,0,39,160,0,10,96,0,33,3,6,128,0,8,32,0,23,128,255,128,246,19,128,0,7,128,48,31,160,3,67,56,128,44,55,128,1,128,47,23,2,108,187,6,128,219,14,58,57,108,170,85,170,85,170,85,170,85,0,0,0,24,24,0,0,0,15,56,103,95,223,191,191,191,0,7,24,32,35,68,72,72,0,124,130,130,130,130,130,124,0,48,16,16,16,16,16,16,0,124,130,2,124,128,128,254,0,124,130,2,28,2,130,124,0,12,20,36,68,132,254,4,0,254,128,128,124,2,130,124,0,124,130,128,252,130,130,124,0,124,130,2,30,2,2,2,0,124,130,130,124,130,130,124,0,124,130,130,126,2,130,124,0,124,130,2,126,130,130,126,0,252,130,130,252,130,130,252,0,124,130,128,128,128,130,124,0,252,130,130,130,130,130,252,0,124,130,128,240,128,130,124,0,124,130,128,240,128,128,128,0,0,0,24,24,0,0,0,195,129,0,0,0,0,129,195,0,0,24,60,60,24,0,0,0,0,0,0,0,0,0,0,0,24,60,126,126,60,24,0,0,0,0,0,0,0,0,0,60,126,255,231,231,255,126,60,0,0,0,24,24,0,0,0,255,255,231,195,195,231,255,255,0,0,24,60,60,24,0,0,255,231,195,129,129,195,231,255,0,24,60,126,126,60,24,0,195,129,0,0,0,0,129,195,60,126,255,231,231,255,126,60,0,0,0,0,0,0,0,0,255,255,231,195,195,231,255,255,0,0,0,0,0,0,0,0,255,231,195,129,129,195,231,255
]

export function system_load(u: Uxn): number {
  const f = (window as any).rom || HelloWorldRom;

  if (!f) {
    return 0;
  }

  u.ram = (new Array(2000).fill(0))

  for (let i = 0; i < f.length; i ++) {
    u.ram[PAGE_PROGRAM + i] = (f.at(i) || 0)
  }

  return 1;
}

/* IO */

export function system_deo(u: Uxn, d: number[], port: number)
{
	switch(port) {
	case 0x3:
		system_cmd(u.ram, PEEK2(d.slice(2)));
		break;
	case 0xe:
		system_inspect(u);
		break;
	}
}

/* Error */

export function uxn_halt(u: Uxn, instr: number, err: number, addr: number)
{
	const d = u.dev.slice(0x00);
	const handler = PEEK2(d);

	if(handler) {
		u.wst.ptr = 4;
		u.wst.dat[0] = addr >> 0x8;
		u.wst.dat[1] = addr & 0xff;
		u.wst.dat[2] = instr;
		u.wst.dat[3] = err;

		return uxn_eval(u, handler);
	} else {
		system_inspect(u);
		outError(`${(instr & 0x40) ? "Return-stack" : "Working-stack"} ${errors[err - 1]}, by ${instr.toString(16).padStart(2, '0')} at 0x${addr.toString(16).padStart(4, '0')}.\n`);
	}
	return 0;
}